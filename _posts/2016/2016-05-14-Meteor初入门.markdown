---
layout: "post"
title: "Meteor初入门"
date: "2016-05-14 19:04"
---


几个星期前接手了一个小项目，恰逢Meteor在Github上的star数量超过Rails，便怀着一种好奇的心态去尝试了下。刚上手的几天各种新潮概念扑面而来，不得不说Meteor在很多想法上的尝试非常大胆，很多优点非常激动人心，其中包含但不仅限于：

* 敏捷的开发速度
* 服务端和客户端共用一种编程语言
* Realtime
* Full Stack Reactivity

这些都是非常了不起的特点，但是他们也不是想象中那么美好。接下来我们就来逐个的谈谈这些**优点**。

### 敏捷的开发速度
诚然，用Meteor搭建一个基础Demo项目只需要几个小时，然而这背后是牺牲了部分东西的。Meteor把编程模式严格的限定死了在DDP的模式之下，如果是一般的需求带来的收益无疑是巨大的，基于Pub／Sub的模式，本地有一个远程数据库的子集，客户端可以完全当成自己拥有了一切^^，正是如此也让服务器和客户端共用一套代码变得更加有意义。带来的弊端就是服务器和客户端被紧密的绑在了一起，这就使得不论是对服务器端的单独定制或者是对客户端和服务端的通讯过程定制变的困难，比如请求日志啊，单独的做一个API server啊。它甚至没有一套自己的Router，即使不用来做API server，在微服务越来越流行的当下，应用集成个微信支付，短信通知啥的也都是要跟第三方应用打交道的，这时候不得不借助一些如Picker，iron:router等工具，在这方面，Meteor跟Rails，Django差距一下就拉开了。

### 服务端和客户单共用同一种编程语言
不管在哪种平台，一种编程语言的应用一定是为了解决某种特定的需求，当它满足不了需求的时候与其花费大量时间去弥补不如换一种更加适合的工具。javascript的并不是最适合做服务器的语言，它即不是开发效率最高的也不是运行效率最高的。如果你的需求是处理高并发，可以去用Go，erlang，如果需求是敏捷开发可以选Ruby，Python，当然如果你的团队大多是前端程序员又对性能有一定要求，这个时候JS似乎才是不二选择。而这时候全栈都用JS编写只是选择便利而带来的结果。Meteor选择了JS，也就意味着它与高并发和良好的服务器生态环境无缘。

### Realtime
随着时间的推进，越来越多的支持Websocket的web框架相继推出，如Sails.js, Phoenix, 就连老牌框架Rails在她的第五个大版本来临时也将带来这一特性，所以Meteor的这一优势已变得不那么明显。

### Full Stack Reactivity
这同样是Meteor的一大亮点，我也非常喜欢。但是这一超前卫的想法也同样会有副作用。比如翻页，详情可参考 [Pagination Problems in Meteor](https://www.discovermeteor.com/blog/pagination-problems-meteor/) 。

## 总结
Meteor在让一些功能变的简单的同时，也让原本简单的东西变的复杂。它还很年轻，生态也没那么丰富，但我还是庆幸认识了它，期待它会在之后的日子里大放异彩。
